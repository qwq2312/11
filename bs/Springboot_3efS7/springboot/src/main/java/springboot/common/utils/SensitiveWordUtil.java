package springboot.common.utils;import cn.hutool.core.util.StrUtil;import cn.hutool.dfa.FoundWord;import cn.hutool.dfa.SensitiveUtil;import org.springframework.beans.factory.InitializingBean;import org.springframework.stereotype.Component;import java.util.ArrayList;import java.util.List;@Componentpublic class SensitiveWordUtil implements InitializingBean {	/**	 * 敏感词过滤替换***	 */	public static String sensitiveWordFiltering(String text) {		List<FoundWord> foundAllSensitives = SensitiveUtil.getFoundAllSensitive(text);		for (FoundWord foundWord : foundAllSensitives) {			String match = foundWord.toString();			StringBuilder replace = new StringBuilder();			for (int i = 0; i < StrUtil.length(match); i++) {				replace.append("*");			}			text = StrUtil.replace(text, match, replace.toString());		}		return text;	}	/**	 * @return java.lang.String	 * @title: sensitiveWordFiltering	 * @Description //敏感词过滤自定义替换	 * @Param [text, replacement]	 **/	public static String sensitiveWordFiltering(String text, String replacement) {		List<FoundWord> foundAllSensitives = SensitiveUtil.getFoundAllSensitive(text);		for (FoundWord foundWord : foundAllSensitives) {			String match = foundWord.toString();			StringBuilder replace = new StringBuilder();			for (int i = 0; i < StrUtil.length(match); i++) {				replace.append(replacement);			}			text = StrUtil.replace(text, match, replace.toString());		}		return text;	}	@Override	public void afterPropertiesSet() throws Exception {		List<String> sensitiveWords = new ArrayList<>();		sensitiveWords.add("敏感词");		SensitiveUtil.init(sensitiveWords);	}}