package springboot.common.config;import com.fasterxml.jackson.annotation.JsonInclude;import com.fasterxml.jackson.core.JsonGenerator;import com.fasterxml.jackson.databind.JsonSerializer;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.SerializerProvider;import com.fasterxml.jackson.databind.module.SimpleModule;import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;import com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;import com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;import org.springframework.stereotype.Component;import java.io.IOException;import java.text.SimpleDateFormat;import java.time.LocalDate;import java.time.LocalDateTime;import java.time.LocalTime;import java.time.format.DateTimeFormatter;import java.util.TimeZone;@Component@Primary@Configurationpublic class MvcLongConfig {	public static class IdLongSerializer extends JsonSerializer<Long> {		@Override		public void serialize(Long value, JsonGenerator gen, SerializerProvider serializers) throws IOException {			if (value > 900000000000000L) {				gen.writeString(value.toString());			} else {				gen.writeNumber(value);			}		}	}	@Bean	public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {		ObjectMapper objectMapper = builder.createXmlMapper(false).build();		objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);		SimpleModule module = new SimpleModule();		module.addSerializer(Long.class, new IdLongSerializer());		module.addSerializer(Long.TYPE, new IdLongSerializer());		objectMapper.registerModule(module);		return objectMapper;	}	/**	 * 配置转换器	 *	 * @return	 */	public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter() {		MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();		converter.setObjectMapper(getObjectMapper());		return converter;	}	private ObjectMapper getObjectMapper() {		ObjectMapper objectMapper = new ObjectMapper();		// 指定时区		objectMapper.setTimeZone(TimeZone.getTimeZone("GMT+8:00"));		// 日期类型字符串处理		objectMapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"));		// Java8日期处理		JavaTimeModule javaTimeModule = new JavaTimeModule();		javaTimeModule.addSerializer(LocalDateTime.class, new LocalDateTimeSerializer(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));		javaTimeModule.addSerializer(LocalDate.class, new LocalDateSerializer(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));		javaTimeModule.addSerializer(LocalTime.class, new LocalTimeSerializer(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));		javaTimeModule.addDeserializer(LocalDateTime.class, new LocalDateTimeDeserializer(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));		javaTimeModule.addDeserializer(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));		javaTimeModule.addDeserializer(LocalTime.class, new LocalTimeDeserializer(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));		objectMapper.registerModule(javaTimeModule);		//将Long序列成String		SimpleModule simpleModule = new SimpleModule();		simpleModule.addSerializer(Long.class, ToStringSerializer.instance);		simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);		objectMapper.registerModule(simpleModule);		return objectMapper;	}}